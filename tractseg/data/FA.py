import numpy as np
import nibabel as nib
import os

import dipy.reconst.dti as dti
from dipy.reconst.dti import fractional_anisotropy,color_fa
from dipy.core.gradients import gradient_table



# HCP_105
# (bad subjects removed: 994273, 937160, 885975, 788876, 713239)
# (no CA: 885975, 788876, 713239)
# subjects = ["992774", "991267", "987983", "984472", "983773", "979984", "978578", "965771", "965367", "959574",
#             "958976", "957974", "951457", "932554", "930449", "922854", "917255", "912447", "910241", "907656",
#             "904044", "901442", "901139", "901038", "899885", "898176", "896879", "896778", "894673", "889579",
#             "887373", "877269", "877168", "872764", "872158", "871964", "871762", "865363", "861456", "859671",
#             "857263", "856766", "849971", "845458", "837964", "837560", "833249", "833148", "826454", "826353",
#             "816653", "814649", "802844", "792766", "792564", "789373", "786569", "784565", "782561", "779370",
#             "771354", "770352", "765056", "761957", "759869", "756055", "753251", "751348", "749361", "748662",
#             "748258", "742549", "734045", "732243", "729557", "729254", "715647", "715041", "709551", "705341",
#             "704238", "702133", "695768", "690152", "687163", "685058", "683256", "680957", "679568", "677968",
#             "673455", "672756", "665254", "654754", "645551", "644044", "638049", "627549", "623844", "622236",
#             "620434", "613538", "601127", "599671", "599469"]
subjects=['599469']
# '''
# subjects=["877269", "877168", "872764", "872158", "871964", "871762", "865363", "861456", "859671",
#         "857263", "856766", "849971", "845458", "837964", "837560", "833249", "833148", "826454", "826353",
#         "816653", "814649", "802844", "792766", "792564", "789373", "786569", "784565", "782561", "779370",
#         "771354", "770352", "765056", "761957", "759869", "756055", "753251", "751348", "749361", "748662",
#         "748258", "742549", "734045", "732243", "729557", "729254", "715647", "715041", "709551", "705341",
#         "704238", "702133", "695768", "690152", "687163", "685058", "683256", "680957", "679568", "677968",
#         "673455", "672756", "665254", "654754", "645551", "644044", "638049", "627549", "623844", "622236",
#         "620434", "613538", "601127", "599671", "599469"]
#
#
# subjects=["102109","102614","102715","103010","103212","106824","108020","111211","113316","114116",
# "115724","116423","117021","118831","119025","120010","120414","122418","123723","125222",
# "125424","126426","127226","127731","127832","130114","130518","130720","134627","135124",
# "135629","136126","136631","137431","137532","138130","138332","139435","143224","143830",
# "144933", "145632", "146735", "146836", "147636", "151021", "151324", "151930", "152225", "152427",
# "153126", "153934", "154330", "161832", "165436", "165941", "167440", "168947", "169545",
#           "172635", "175136", "176845", "177140", "180230", "180533", "183741", "185038", "186040", "186545",
#           "186848", "188145", "189652", "191235", "192237", "193845", "194443", "196851", "196952", "198047",
#           "199352", "200513", "202820", "204218", "206323", "206525", "206727", "206828", "206929", "208630",
#           "210112", "211619", "211821", "213017", "213522", "219231", "227533", "238033", "248238", "255740",
#           "257946", "274542", "281135", "286347", "299760", "300719", "314225", "325129", "329844", "342129",
#           "349244", "350330", "360030", "362034", "368551", "368753", "376247", "378756", "385046", "392447"
#           ]  #hcp_add
# '''
#
# subjects=["100307","100408","101006","101107","101309","101410","101915","102008","102311",
# "102816","103111","103515","103818","104820","105014","105115","105216","106016","106319",
# "106521","107321","107422","108121","108323","108525",
# "108828","109123","110411","111312","111413","111716","112819","113215","113619","113821",
# "113922","114419","115320","116524","117122","117324","118528","118730","118932","119833",
# "120111","120212","120515","121618","121719","122317","122620","123117","123420","123925",
# "124220","124422","124826","125525","126325","126628",
#           "127630", "127933", "128127", "128632",
#           "129028", "130013", "130316", "130922", "131217", "131722", "131924", "132118", "133019", "133625",
#           "133827", "133928", "134324", "135225", "135528", "135932", "136227", "136833", "137027", "137128",
#           "137633","137936","138231","138534","139233","139637","140117","140420","140824","140925","141422",
# "141826","142828","143325","144226","144428","144832","145834","146331","146432","147030",
# "147737","148032","148335","148840","148941","149337","149539","149741","150524","150625",
# "150726","151223","151526","151627","151728","152831","153025","153429","153833","154431",
# "154734","154835","154936","155231","155635","156233","156637","157336","157437","158035",
# "158136","158540","159138","159239","159340","159441","160123","160830","161327","161630",
# "161731","162026","162228", "162329","162733","163129","163331","163432","163836","164030",
# "164131","164939","165032","165840","166438","167036","167743","168139","168341","169343",
# "169444","170934","171431","171633","172029","172130","172332","172534","172938","173132",
# "173334","173435","173536","173940","175035","175439","176542","177645","177746","178142",
# "178748","178849","178950","179346","179548","180129","180432","180836","180937","181131",
# "181232","182739","182840","183034","185139","185442","186141","187143","187547","187850",
# "188347","189349","189450","190031","191033","191336","191437","191841","192439","192540",
# "192843","193239","194140","194645","194847","195041","195647","195849","196144","196750",
# "197348","197550","197651","198350","198451","198855","199150","199251","199453","199655",
# "199958","200109","200614","201111","201414","201818","203418","204016","204521","205119",
# "205220","205725","205826","208024","208226","208327","208428","209834","209935","210011",
# "210415","210617","211114","211215","211316","211417","211720","211922","212116","212217",
# "212318","212419","214019","214221","214423","214726","217126","217429","221319","224022",
# "231928","233326","239944","245333","246133","249947","250427","250932","251833","255639",
# "268850","280739","284646","285345","285446","289555","290136","293748","298051","298455",
# "303119","303624","304020","307127","308331","310621","316633","329440","334635","339847",
# "351938","352132","352738","355239","392750"
#           ]  #hcp_add_2

path='/data1/qilu/HCP105/'
#
# path_test='/data1/qilu/HCP105/992774/T1w/Diffusion/data.nii.gz'
# dwi_nii = nib.load(path_test)

for subject in subjects:
    dwiname = path+subject+'/T1w/Diffusion/data.nii.gz'
    gtable = path+subject+'/T1w/Diffusion/bvecs'
    btable = path+subject+'/T1w/Diffusion/bvals'
    mask =  path+subject+'/T1w/Diffusion/nodif_brain_mask.nii.gz'
    #directory = '/data1/qilu/HCP105/'+subject+'/T1w/Diffusion/'
    directory = '/data1/wanliu/HCP_105_multi-modality' + subject

    print("now it is",subject)
    dwi_nii = nib.load(dwiname)
    dwi_data = dwi_nii.get_fdata()
    mask_data = nib.load(mask).get_fdata()
    gtab = gradient_table(bvals=btable,bvecs=gtable)
    #print('dwi_data.shape=',dwi_data.shape)
    #print ('mask_data.shape=',mask_data.shape)
    #print ('gtab.bvals.shape=',gtab.bvals.shape)
    #print ('gtab.bvecs.shape=',gtab.bvecs.shape)
    #print '\n gtab.bvecs=\n',gtab.bvecs

    #print ('Calculating FA MD')
    hdr = dwi_nii.header
    tenmodel = dti.TensorModel(gtab)
    tenfit = tenmodel.fit(dwi_data,mask_data)

    FA = fractional_anisotropy(tenfit.evals)
    FA[np.isnan(FA)] = 0
    FA_nii = nib.Nifti1Image(FA, dwi_nii.affine, hdr)
    FA_name = os.path.join(directory,"FA.nii.gz")
    # nib.save(FA_nii, FA_name)
    FA_nii.to_filename(FA_name)
    print ("FA_nii.shape =", FA_nii.shape)
    print (FA_name)

    MD = tenfit.md
    MD_nii = nib.Nifti1Image(MD, dwi_nii.affine, hdr)
    MD_name = os.path.join(directory,"MD.nii.gz")
    MD_nii.to_filename(MD_name)
    print ("MD_nii.shape =", MD_nii.shape)
    print (MD_name)


